#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sockets:server');
var http = require('http');
var server = http.createServer(app);
var io = require('socket.io')(server);
const events = {
	user_access_allowed:"101",
	door_held_open_too_long:"305",
	door_abnormal:"306",
	door_force_open:"307",
	door_controller_offline:"308",
	door_controller_fault:"309",
	tamper_alarm:"310",

	// ACKNOWLEDGE EVENT

	ACK_EVT: "ACK_EVT"
}
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


io.on('connection',(socket)=>{

	let sampledata = "SND_EVT&44679&1&22092016&175523&101&1342&0&80&0&&";
	console.log("User connected");

	var broadcastData = (data) =>{
		console.log(data);
		io.sockets.emit(events.user_access_allowed,{data:sampledata,deviceId:data});
	}

	socket.on("1",(data)=>{
		broadcastData(data)
	})
	socket.on("2",(data)=>{
		broadcastData(data)
	})
	socket.on("3",(data)=>{
		broadcastData(data)
	})
	socket.on("4",(data)=>{
		broadcastData(data)
	})
	socket.on("5",(data)=>{
		broadcastData(data)
	})
	socket.on("6",(data)=>{
		broadcastData(data)
	})
	io.on(events.user_access_allowed,(data)=>{
		socket.emit(events.user_access_allowed,data);
	});

	io.on(events.door_held_open_too_long,(data)=>{
		socket.emit(events.door_held_open_too_long,data);
	});

	io.on(events.door_abnormal,(data)=>{
		socket.emit(events.door_abnormal,data);
	});

	io.on(events.door_force_open,(data)=>{
		socket.emit(events.door_force_open,data);
	});

	io.on(events.door_controller_offline,(data)=>{
		socket.emit(events.door_controller_offline);
	})

	io.on(events.door_controller_fault,(data)=>{
		socket.emit(events.door_controller_fault,data);
	})

	io.on(events.tamper_alarm,(data)=>{
		socket.emit(events.tamper_alarm,data);
	})

	socket.on(events.ACK_EVT,(data)=>{
		console.log(data);
		io.emit(events.ACK_EVT,data.acknowlege);
	})

	socket.on('disconnect',(socket)=>{
		console.log("socket disconnected");
	})
})

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
